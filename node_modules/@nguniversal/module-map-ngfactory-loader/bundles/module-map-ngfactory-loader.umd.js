/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
	typeof define === 'function' && define.amd ? define('@nguniversal/module-map-ngfactory-loader', ['exports', '@angular/core'], factory) :
	(factory((global.nguniversal = global.nguniversal || {}, global.nguniversal.moduleMapNgfactoryLoader = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Token used by the ModuleMapNgFactoryLoader to load modules
 */
var /** @type {?} */ MODULE_MAP = new core.InjectionToken('MODULE_MAP');
/**
 * NgModuleFactoryLoader which does not lazy load
 */
var ModuleMapNgFactoryLoader = /** @class */ (function () {
    function ModuleMapNgFactoryLoader(compiler, moduleMap) {
        this.compiler = compiler;
        this.moduleMap = moduleMap;
    }
    /**
     * @param {?} loadChildrenString
     * @return {?}
     */
    ModuleMapNgFactoryLoader.prototype.load = /**
     * @param {?} loadChildrenString
     * @return {?}
     */
    function (loadChildrenString) {
        var /** @type {?} */ offlineMode = this.compiler instanceof core.Compiler;
        var /** @type {?} */ type = this.moduleMap[loadChildrenString];
        if (!type) {
            throw new Error(loadChildrenString + " did not exist in the MODULE_MAP");
        }
        return offlineMode ?
            this.loadFactory(/** @type {?} */ (type)) : this.loadAndCompile(/** @type {?} */ (type));
    };
    /**
     * @param {?} factory
     * @return {?}
     */
    ModuleMapNgFactoryLoader.prototype.loadFactory = /**
     * @param {?} factory
     * @return {?}
     */
    function (factory) {
        return new Promise(function (resolve) { return resolve(factory); });
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ModuleMapNgFactoryLoader.prototype.loadAndCompile = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return this.compiler.compileModuleAsync(type);
    };
    ModuleMapNgFactoryLoader.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ModuleMapNgFactoryLoader.ctorParameters = function () { return [
        { type: core.Compiler, },
        { type: undefined, decorators: [{ type: core.Inject, args: [MODULE_MAP,] },] },
    ]; };
    return ModuleMapNgFactoryLoader;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Helper function for getting the providers object for the MODULE_MAP
 *
 * @param {?} moduleMap Map to use as a value for MODULE_MAP
 * @return {?}
 */
function provideModuleMap(moduleMap) {
    return {
        provide: MODULE_MAP,
        useValue: moduleMap
    };
}
/**
 * Module for using a NgModuleFactoryLoader which does not lazy load
 */
var ModuleMapLoaderModule = /** @class */ (function () {
    function ModuleMapLoaderModule() {
    }
    /**
     * Returns a ModuleMapLoaderModule along with a MODULE_MAP
     *
     * @param moduleMap Map to use as a value for MODULE_MAP
     */
    /**
     * Returns a ModuleMapLoaderModule along with a MODULE_MAP
     *
     * @param {?} moduleMap Map to use as a value for MODULE_MAP
     * @return {?}
     */
    ModuleMapLoaderModule.withMap = /**
     * Returns a ModuleMapLoaderModule along with a MODULE_MAP
     *
     * @param {?} moduleMap Map to use as a value for MODULE_MAP
     * @return {?}
     */
    function (moduleMap) {
        return {
            ngModule: ModuleMapLoaderModule,
            providers: [
                {
                    provide: MODULE_MAP,
                    useValue: moduleMap
                }
            ]
        };
    };
    ModuleMapLoaderModule.decorators = [
        { type: core.NgModule, args: [{
                    providers: [
                        {
                            provide: core.NgModuleFactoryLoader,
                            useClass: ModuleMapNgFactoryLoader
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ModuleMapLoaderModule.ctorParameters = function () { return []; };
    return ModuleMapLoaderModule;
}());

exports.provideModuleMap = provideModuleMap;
exports.ModuleMapLoaderModule = ModuleMapLoaderModule;
exports.MODULE_MAP = MODULE_MAP;
exports.ModuleMapNgFactoryLoader = ModuleMapNgFactoryLoader;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=module-map-ngfactory-loader.umd.js.map
