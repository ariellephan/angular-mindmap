{"version":3,"file":"module-map-ngfactory-loader.umd.min.js","sources":["../../modules/module-map-ngfactory-loader/src/module-map-loader.module.ts","../../modules/module-map-ngfactory-loader/src/module-map-ngfactory-loader.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  NgModule,\n  NgModuleFactoryLoader,\n  ModuleWithProviders,\n  StaticProvider\n} from '@angular/core';\n\nimport { ModuleMapNgFactoryLoader, MODULE_MAP } from './module-map-ngfactory-loader';\nimport {ModuleMap} from './module-map';\n\n/**\n * Helper function for getting the providers object for the MODULE_MAP\n *\n * @param moduleMap Map to use as a value for MODULE_MAP\n */\nexport function provideModuleMap(moduleMap: ModuleMap): StaticProvider {\n  return {\n    provide: MODULE_MAP,\n    useValue: moduleMap\n  };\n}\n\n/**\n * Module for using a NgModuleFactoryLoader which does not lazy load\n */\n@NgModule({\n  providers: [\n    {\n      provide: NgModuleFactoryLoader,\n      useClass: ModuleMapNgFactoryLoader\n    }\n  ]\n})\nexport class ModuleMapLoaderModule {\n  /**\n   * Returns a ModuleMapLoaderModule along with a MODULE_MAP\n   *\n   * @param moduleMap Map to use as a value for MODULE_MAP\n   */\n  static withMap(moduleMap: ModuleMap): ModuleWithProviders {\n    return {\n      ngModule: ModuleMapLoaderModule,\n      providers: [\n        {\n          provide: MODULE_MAP,\n          useValue: moduleMap\n        }\n      ]\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Injectable,\n  NgModuleFactoryLoader,\n  InjectionToken,\n  NgModuleFactory,\n  Inject,\n  Type,\n  Compiler\n} from '@angular/core';\nimport {ModuleMap} from './module-map';\n\n/**\n * Token used by the ModuleMapNgFactoryLoader to load modules\n */\nexport const MODULE_MAP: InjectionToken<ModuleMap> = new InjectionToken('MODULE_MAP');\n\n/**\n * NgModuleFactoryLoader which does not lazy load\n */\n@Injectable()\nexport class ModuleMapNgFactoryLoader implements NgModuleFactoryLoader {\n  constructor(private compiler: Compiler, @Inject(MODULE_MAP) private moduleMap: ModuleMap) { }\n\n  load(loadChildrenString: string): Promise<NgModuleFactory<any>> {\n    const offlineMode = this.compiler instanceof Compiler;\n    const type = this.moduleMap[loadChildrenString];\n\n    if (!type) {\n      throw new Error(`${loadChildrenString} did not exist in the MODULE_MAP`);\n    }\n\n    return offlineMode ?\n      this.loadFactory(<NgModuleFactory<any>> type) : this.loadAndCompile(<Type<any>> type);\n  }\n\n  private loadFactory(factory: NgModuleFactory<any>): Promise<NgModuleFactory<any>> {\n    return new Promise(resolve => resolve(factory));\n  }\n\n  private loadAndCompile(type: Type<any>): Promise<NgModuleFactory<any>> {\n    return this.compiler.compileModuleAsync(type);\n  }\n}\n"],"names":["provideModuleMap","moduleMap","provide","MODULE_MAP","useValue","InjectionToken","ModuleMapNgFactoryLoader","compiler","this","prototype","load","loadChildrenString","offlineMode","Compiler","type","Error","loadFactory","loadAndCompile","factory","Promise","resolve","compileModuleAsync","Injectable","undefined","decorators","Inject","args","ModuleMapLoaderModule","withMap","ngModule","providers","NgModule","NgModuleFactoryLoader","useClass"],"mappings":";;;;;;;wVAsBA,SAAAA,GAAiCC,GAC/B,OACEC,QAASC,EACTC,SAAUH,GCJd,GAAaE,GAAwC,GAAIE,GAAAA,eAAe,2BAOtE,QAAFC,GAAsBC,EAAgDN,GAAhDO,KAAtBD,SAAsBA,EAAgDC,KAAtEP,UAAsEA,EA5BtE,MA8BEK,GAAFG,UAAAC,KAAE,SAAKC,GACH,GAAMC,GAAcJ,KAAKD,mBAAoBM,GAAAA,SACvCC,EAAON,KAAKP,UAAUU,EAE5B,KAAKG,EACH,KAAM,IAAIC,OAASJ,EAAzB,mCAGI,OAAOC,GACLJ,KAAKQ,YAAW,GAAgCR,KAAKS,eAAc,IAG/DX,EAAVG,UAAAO,YAAA,SAAsBE,GAClB,MAAO,IAAIC,SAAQ,SAAAC,GAAW,MAAAA,GAAQF,MAGhCZ,EAAVG,UAAAQ,eAAA,SAAyBH,GACrB,MAAON,MAAKD,SAASc,mBAAmBP,mBArB5CA,KAACQ,EAAAA,iDAZDR,KAAED,EAAAA,WAcFC,SAAAS,GAAAC,aAAAV,KAA2CW,EAAAA,OAA3CC,MAAkDvB,QA5BlDG,gCDAA,MA8CSqB,GAATC,QAAE,SAAe3B,GACb,OACE4B,SAAUF,EACVG,YAEI5B,QAASC,EACTC,SAAUH,qBApBpBa,KAACiB,EAAAA,SAADL,OACEI,YAEI5B,QAAS8B,EAAAA,sBACTC,SAAU3B,8CApChBqB"}