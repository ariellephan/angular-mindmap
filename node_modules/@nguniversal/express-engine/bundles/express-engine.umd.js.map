{"version":3,"file":"express-engine.umd.js","sources":["../../modules/express-engine/src/main.ts","../../modules/express-engine/src/file-loader.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as fs from 'fs';\nimport { Request, Response } from 'express';\n\nimport { NgModuleFactory, Type, CompilerFactory, Compiler, StaticProvider } from '@angular/core';\nimport { ResourceLoader } from '@angular/compiler';\nimport {\n  INITIAL_CONFIG,\n  renderModuleFactory,\n  platformDynamicServer\n} from '@angular/platform-server';\n\nimport { FileLoader } from './file-loader';\nimport { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: Request;\n  res?: Response;\n  url?: string;\n  document?: string;\n}\n\n/**\n * This holds a cached version of each index used.\n */\nconst templateCache: { [key: string]: string } = {};\n\n/**\n * Map of Module Factories\n */\nconst factoryCacheMap = new Map<Type<{}>, NgModuleFactory<{}>>();\n\n/**\n * This is an express engine for handling Angular Applications\n */\nexport function ngExpressEngine(setupOptions: NgSetupOptions) {\n\n  const compilerFactory: CompilerFactory = platformDynamicServer().injector.get(CompilerFactory);\n  const compiler: Compiler = compilerFactory.createCompiler([\n    {\n      providers: [\n        { provide: ResourceLoader, useClass: FileLoader, deps: [] }\n      ]\n    }\n  ]);\n\n  return function (filePath: string,\n                   options: RenderOptions,\n                   callback: (err?: Error | null, html?: string) => void) {\n\n    options.providers = options.providers || [];\n\n    try {\n      const moduleOrFactory = options.bootstrap || setupOptions.bootstrap;\n\n      if (!moduleOrFactory) {\n        throw new Error('You must pass in a NgModule or NgModuleFactory to be bootstrapped');\n      }\n\n      setupOptions.providers = setupOptions.providers || [];\n\n      const extraProviders = setupOptions.providers.concat(\n        options.providers,\n        getReqResProviders(options.req, options.res),\n        [\n          {\n            provide: INITIAL_CONFIG,\n            useValue: {\n              document: options.document || getDocument(filePath),\n              url: options.url || options.req.originalUrl\n            }\n          }\n        ]);\n\n      getFactory(moduleOrFactory, compiler)\n        .then(factory => {\n          return renderModuleFactory(factory, {\n            extraProviders\n          });\n        })\n        .then((html: string) => {\n          callback(null, html);\n        }, (err) => {\n          callback(err);\n        });\n    } catch (err) {\n      callback(err);\n    }\n  };\n}\n\n/**\n * Get a factory from a bootstrapped module/ module factory\n */\nfunction getFactory(\n  moduleOrFactory: Type<{}> | NgModuleFactory<{}>, compiler: Compiler\n): Promise<NgModuleFactory<{}>> {\n  return new Promise<NgModuleFactory<{}>>((resolve, reject) => {\n    // If module has been compiled AoT\n    if (moduleOrFactory instanceof NgModuleFactory) {\n      resolve(moduleOrFactory);\n      return;\n    } else {\n      let moduleFactory = factoryCacheMap.get(moduleOrFactory);\n\n      // If module factory is cached\n      if (moduleFactory) {\n        resolve(moduleFactory);\n        return;\n      }\n\n      // Compile the module and cache it\n      compiler.compileModuleAsync(moduleOrFactory)\n        .then((factory) => {\n          factoryCacheMap.set(moduleOrFactory, factory);\n          resolve(factory);\n        }, (err => {\n          reject(err);\n        }));\n    }\n  });\n}\n\n/**\n * Get providers of the request and response\n */\nfunction getReqResProviders(req: Request, res?: Response): StaticProvider[] {\n  const providers: StaticProvider[] = [\n    {\n      provide: REQUEST,\n      useValue: req\n    }\n  ];\n  if (res) {\n    providers.push({\n      provide: RESPONSE,\n      useValue: res\n    });\n  }\n  return providers;\n}\n\n/**\n * Get the document at the file path\n */\nfunction getDocument(filePath: string): string {\n  return templateCache[filePath] = templateCache[filePath] || fs.readFileSync(filePath).toString();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as fs from 'fs';\nimport { ResourceLoader } from '@angular/compiler';\n\nexport class FileLoader implements ResourceLoader {\n  get(url: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(url, (err: NodeJS.ErrnoException, buffer: Buffer) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(buffer.toString());\n      });\n    });\n  }\n}\n"],"names":["fs.readFileSync","RESPONSE","REQUEST","compiler","NgModuleFactory","renderModuleFactory","INITIAL_CONFIG","ResourceLoader","platformDynamicServer","CompilerFactory","fs.readFile"],"mappings":"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"}