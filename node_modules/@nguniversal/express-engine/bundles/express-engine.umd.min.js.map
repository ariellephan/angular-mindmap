{"version":3,"file":"express-engine.umd.min.js","sources":["../../modules/express-engine/src/main.ts","../../modules/express-engine/src/file-loader.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as fs from 'fs';\nimport { Request, Response } from 'express';\n\nimport { NgModuleFactory, Type, CompilerFactory, Compiler, StaticProvider } from '@angular/core';\nimport { ResourceLoader } from '@angular/compiler';\nimport {\n  INITIAL_CONFIG,\n  renderModuleFactory,\n  platformDynamicServer\n} from '@angular/platform-server';\n\nimport { FileLoader } from './file-loader';\nimport { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: Request;\n  res?: Response;\n  url?: string;\n  document?: string;\n}\n\n/**\n * This holds a cached version of each index used.\n */\nconst templateCache: { [key: string]: string } = {};\n\n/**\n * Map of Module Factories\n */\nconst factoryCacheMap = new Map<Type<{}>, NgModuleFactory<{}>>();\n\n/**\n * This is an express engine for handling Angular Applications\n */\nexport function ngExpressEngine(setupOptions: NgSetupOptions) {\n\n  const compilerFactory: CompilerFactory = platformDynamicServer().injector.get(CompilerFactory);\n  const compiler: Compiler = compilerFactory.createCompiler([\n    {\n      providers: [\n        { provide: ResourceLoader, useClass: FileLoader, deps: [] }\n      ]\n    }\n  ]);\n\n  return function (filePath: string,\n                   options: RenderOptions,\n                   callback: (err?: Error | null, html?: string) => void) {\n\n    options.providers = options.providers || [];\n\n    try {\n      const moduleOrFactory = options.bootstrap || setupOptions.bootstrap;\n\n      if (!moduleOrFactory) {\n        throw new Error('You must pass in a NgModule or NgModuleFactory to be bootstrapped');\n      }\n\n      setupOptions.providers = setupOptions.providers || [];\n\n      const extraProviders = setupOptions.providers.concat(\n        options.providers,\n        getReqResProviders(options.req, options.res),\n        [\n          {\n            provide: INITIAL_CONFIG,\n            useValue: {\n              document: options.document || getDocument(filePath),\n              url: options.url || options.req.originalUrl\n            }\n          }\n        ]);\n\n      getFactory(moduleOrFactory, compiler)\n        .then(factory => {\n          return renderModuleFactory(factory, {\n            extraProviders\n          });\n        })\n        .then((html: string) => {\n          callback(null, html);\n        }, (err) => {\n          callback(err);\n        });\n    } catch (err) {\n      callback(err);\n    }\n  };\n}\n\n/**\n * Get a factory from a bootstrapped module/ module factory\n */\nfunction getFactory(\n  moduleOrFactory: Type<{}> | NgModuleFactory<{}>, compiler: Compiler\n): Promise<NgModuleFactory<{}>> {\n  return new Promise<NgModuleFactory<{}>>((resolve, reject) => {\n    // If module has been compiled AoT\n    if (moduleOrFactory instanceof NgModuleFactory) {\n      resolve(moduleOrFactory);\n      return;\n    } else {\n      let moduleFactory = factoryCacheMap.get(moduleOrFactory);\n\n      // If module factory is cached\n      if (moduleFactory) {\n        resolve(moduleFactory);\n        return;\n      }\n\n      // Compile the module and cache it\n      compiler.compileModuleAsync(moduleOrFactory)\n        .then((factory) => {\n          factoryCacheMap.set(moduleOrFactory, factory);\n          resolve(factory);\n        }, (err => {\n          reject(err);\n        }));\n    }\n  });\n}\n\n/**\n * Get providers of the request and response\n */\nfunction getReqResProviders(req: Request, res?: Response): StaticProvider[] {\n  const providers: StaticProvider[] = [\n    {\n      provide: REQUEST,\n      useValue: req\n    }\n  ];\n  if (res) {\n    providers.push({\n      provide: RESPONSE,\n      useValue: res\n    });\n  }\n  return providers;\n}\n\n/**\n * Get the document at the file path\n */\nfunction getDocument(filePath: string): string {\n  return templateCache[filePath] = templateCache[filePath] || fs.readFileSync(filePath).toString();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as fs from 'fs';\nimport { ResourceLoader } from '@angular/compiler';\n\nexport class FileLoader implements ResourceLoader {\n  get(url: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(url, (err: NodeJS.ErrnoException, buffer: Buffer) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(buffer.toString());\n      });\n    });\n  }\n}\n"],"names":["ngExpressEngine","setupOptions","compilerFactory","platformDynamicServer","injector","get","CompilerFactory","compiler","createCompiler","providers","provide","ResourceLoader","useClass","FileLoader","deps","filePath","options","callback","moduleOrFactory","bootstrap","Error","extraProviders_1","concat","getReqResProviders","req","res","INITIAL_CONFIG","useValue","document","getDocument","url","originalUrl","getFactory","then","factory","renderModuleFactory","extraProviders","html","err","Promise","resolve","reject","NgModuleFactory","moduleFactory","factoryCacheMap","compileModuleAsync","set","REQUEST","push","RESPONSE","templateCache","fs.readFileSync","toString","prototype","fs.readFile","buffer","Map"],"mappings":";;;;;;;wmBAoDA,SAAAA,GAAgCC,GAE9B,GAAMC,GAAmCC,EAAAA,wBAAwBC,SAASC,IAAIC,EAAAA,iBACxEC,EAAqBL,EAAgBM,iBAEvCC,YACIC,QAASC,EAAAA,eAAgBC,SAAUC,EAAYC,YAKvD,OAAO,UAAUC,EACAC,EACAC,GAEfD,EAAQP,UAAYO,EAAQP,aAE5B,KACE,GAAMS,GAAkBF,EAAQG,WAAalB,EAAakB,SAE1D,KAAKD,EACH,KAAM,IAAIE,OAAM,oEAGlBnB,GAAaQ,UAAYR,EAAaQ,aAEtC,IAAMY,GAAiBpB,EAAaQ,UAAUa,OAC5CN,EAAQP,UACRc,EAAmBP,EAAQQ,IAAKR,EAAQS,OAGpCf,QAASgB,EAAAA,eACTC,UACEC,SAAUZ,EAAQY,UAAYC,EAAYd,GAC1Ce,IAAKd,EAAQc,KAAOd,EAAQQ,IAAIO,eAKxCC,GAAWd,EAAiBX,GACzB0B,KAAK,SAAAC,GACJ,MAAOC,GAAAA,oBAAoBD,GACzBE,eAAZf,MAGSY,KAAK,SAACI,GACLpB,EAAS,KAAMoB,IACd,SAACC,GACFrB,EAASqB,KAEb,MAAOA,GACPrB,EAASqB,KAQf,QAAAN,GACEd,EAAiDX,GAEjD,MAAO,IAAIgC,SAA6B,SAACC,EAASC,GAEhD,GAAIvB,YAA2BwB,GAAAA,gBAE7B,WADAF,GAAQtB,EAGR,IAAIyB,GAAgBC,EAAgBvC,IAAIa,EAGxC,IAAIyB,EAEF,WADAH,GAAQG,EAKVpC,GAASsC,mBAAmB3B,GACzBe,KAAK,SAACC,GACLU,EAAgBE,IAAI5B,EAAiBgB,GACrCM,EAAQN,IACT,SAAGI,GACFG,EAAOH,OASjB,QAAAf,GAA4BC,EAAcC,GACxC,GAAMhB,KAEFC,QAASqC,EAAAA,QACTpB,SAAUH,GASd,OANIC,IACFhB,EAAUuC,MACRtC,QAASuC,EAAAA,SACTtB,SAAUF,IAGPhB,EAMT,QAAAoB,GAAqBd,GACnB,MAAOmC,GAAcnC,GAAYmC,EAAcnC,IAAaoC,EAAAA,aAAgBpC,GAAUqC,WC5JxF,GAGAvC,GAAA,yBAVA,MAWEA,GAAFwC,UAAAhD,IAAE,SAAIyB,GACF,MAAO,IAAIS,SAAQ,SAACC,EAASC,GAC3Ba,EAAAA,SAAYxB,EAAK,SAACQ,EAA4BiB,GAC5C,GAAIjB,EACF,MAAOG,GAAOH,EAGhBE,GAAQe,EAAOH,iBAlBvBvC,KD0CMqC,KAKAN,EAAkB,GAAIY"}